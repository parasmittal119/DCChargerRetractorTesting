# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\retractor_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
print("Loading Retractor Testing setup requirements")
import datetime
import getpass
import os
import serial
import threading
import time
import webbrowser
import resource_file
import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
from screeninfo import get_monitors
from PyQt5.QtSerialPort import QSerialPortInfo
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QTimer

from database_file import *

global colors, data_dict, reply_dict

colors = {'Red': "255, 30, 30, ", "Cyan": '26, 214, 214, ', 'Blue': "0, 0, 255, ", "Green": "34, 200, 20, "}

data_dict = {
    'Idle Idle': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 39 35 0D\n',
    'Idle Preparing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 39 31 45 0D\n',
    'Idle Charging': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 39 31 30 0D\n',
    'Idle Finishing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 32 33 36 36 42 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 37 39 0D\n',
    'Idle Faulted': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 39 35 0D\n',
    'Idle Reserved': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 36 39 0D\n',
    'Preparing Idle': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 31 45 0D\n',
    'Preparing Preparing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 38 41 37 0D\n',
    'Preparing Charging': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 38 39 39 0D\n',
    'Preparing Finishing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 32 33 36 36 42 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 30 32 0D\n',
    'Preparing Faulted': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 31 45 0D\n',
    'Preparing Reserved': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 38 46 32 0D\n',
    'Charging Idle': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 31 30 0D\n',
    'Charging Preparing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 38 39 39 0D\n',
    'Charging Charging': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 38 38 42 0D\n',
    'Charging Finishing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 32 33 36 36 42 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 38 46 34 0D\n',
    'Charging Faulted': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 31 30 0D\n',
    'Charging Reserved': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 36 30 30 33 35 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 38 45 34 0D\n',
    'Finishing Idle': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 32 30 30 33 35 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 37 39 0D\n',
    'Finishing Preparing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 32 30 30 33 35 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 39 30 32 0D\n',
    'Finishing Charging': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 32 30 30 33 35 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 38 46 34 0D\n',
    'Finishing Finishing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 32 30 30 33 35 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 32 33 36 36 42 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 35 44 0D\n',
    'Finishing Faulted': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 32 30 30 33 35 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 37 39 0D\n',
    'Finishing Reserved': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 32 30 30 33 35 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 34 44 0D\n',
    'Faulted Idle': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 39 35 0D\n',
    'Faulted Preparing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 39 31 45 0D\n',
    'Faulted Charging': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 39 31 30 0D\n',
    'Faulted Finishing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 32 33 36 36 42 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 37 39 0D\n',
    'Faulted Faulted': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 39 35 0D\n',
    'Faulted Reserved': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 36 39 0D\n',
    'Reserved Idle': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 36 39 0D\n',
    'Reserved Preparing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 31 33 30 30 45 30 30 31 46 34 30 35 30 30 30 30 46 46 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 38 46 32 0D\n',
    'Reserved Charging': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 36 33 36 36 42 46 46 30 30 30 30 30 30 46 30 30 35 46 46 30 30 30 30 30 30 30 32 37 39 30 30 30 30 30 30 46 46 30 30 30 30 30 30 30 30 30 30 45 38 45 34 0D\n',
    'Reserved Finishing': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 32 33 36 36 42 46 46 30 30 30 30 30 32 38 41 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 34 44 0D\n',
    'Reserved Faulted': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 30 30 46 46 30 30 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 36 39 0D\n',
    'Reserved Reserved': '7E 32 31 43 33 36 32 34 32 34 30 36 36 46 46 36 43 30 32 30 31 30 30 33 35 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 33 36 36 42 46 46 30 30 46 46 30 30 30 30 30 35 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 45 39 33 44 0D'}

reply_dict = {'Idle Idle': b'~20C362000000FDA0\r', 'Idle Preparing': b'~20C362000000FDA0\r',
              'Idle Charging': b'~20C362000000FDA0\r', 'Idle Finishing': b'~20C362000000FDA0\r',
              'Idle Faulted': b'~20C362000000FDA0\r', 'Idle Reserved': b'~20C362000000FDA0\r',
              'Preparing Idle': b'~20C362000000FDA0\r', 'Preparing Preparing': b'~20C362000000FDA0\r',
              'Preparing Charging': b'~20C362000000FDA0\r', 'Preparing Finishing': b'~20C362000000FDA0\r',
              'Preparing Faulted': b'~20C362000000FDA0\r', 'Preparing Reserved': b'~20C362000000FDA0\r',
              'Charging Idle': b'~20C362000000FDA0\r', 'Charging Preparing': b'~20C362000000FDA0\r',
              'Charging Charging': b'~20C362000000FDA0\r', 'Charging Finishing': b'~20C362000000FDA0\r',
              'Charging Faulted': b'~20C362000000FDA0\r', 'Charging Reserved': b'~20C362000000FDA0\r',
              'Finishing Idle': b'~20C362000000FDA0\r', 'Finishing Preparing': b'~20C362000000FDA0\r',
              'Finishing Charging': b'~20C362000000FDA0\r', 'Finishing Finishing': b'~20C362000000FDA0\r',
              'Finishing Faulted': b'~20C362000000FDA0\r', 'Finishing Reserved': b'~20C362000000FDA0\r',
              'Faulted Idle': b'~20C362000000FDA0\r', 'Faulted Preparing': b'~20C362000000FDA0\r',
              'Faulted Charging': b'~20C362000000FDA0\r', 'Faulted Finishing': b'~20C362000000FDA0\r',
              'Faulted Faulted': b'~20C362000000FDA0\r', 'Faulted Reserved': b'~20C362000000FDA0\r',
              'Reserved Idle': b'~20C362000000FDA0\r', 'Reserved Preparing': b'~20C362000000FDA0\r',
              'Reserved Charging': b'~20C362000000FDA0\r', 'Reserved Finishing': b'~20C362000000FDA0\r',
              'Reserved Faulted': b'~20C362000000FDA0\r', 'Reserved Reserved': b'~20C362000000FDA0\r'}


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(800, 950)
        Form.move(int(get_monitors()[0].width / 2 - 400), int(get_monitors()[0].height / 2 - 425))
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(120, 60, 541, 701))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.ateHeading = QtWidgets.QLabel(self.frame)
        self.ateHeading.setGeometry(QtCore.QRect(70, 115, 411, 61))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.ateHeading.setFont(font)
        self.ateHeading.setStyleSheet("border:4px solid black;background-color: rgb(250, 249, 246);")
        self.ateHeading.setAlignment(QtCore.Qt.AlignCenter)
        self.ateHeading.setObjectName("ateHeading")
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(29, 173, 491, 521))
        self.label_5.setStyleSheet("border:4px solid black;border-radius:30px;background-color: rgb(250, 249, 246);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")

        self.comboBox = QtWidgets.QComboBox(self.frame)
        self.comboBox.setGeometry(QtCore.QRect(380, 190, 121, 36))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("QComboBox{background-color:rgba(0,0,0,0);\n"
                                    "border:none;\n"
                                    "border-bottom: 3px solid rgba(42,226,230,255);\n"
                                    "color:rgba(0,0,0,255);\n"
                                    "padding-bottom:7px;\n"
                                    "border-bottom-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                                    "}\n"
                                    "\n"
                                    "QComboBox QAbstractItemView {\n"
                                    "    background-color: white;\n"
                                    "    color: black;\n"
                                    "}")
        self.comboBox.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
        self.comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.comboBox.setObjectName("comboBox")

        self.textBrowser = QtWidgets.QTextBrowser(self.frame)
        self.textBrowser.setGeometry(QtCore.QRect(50, 230, 451, 251))
        self.textBrowser.setObjectName("textBrowser")
        self.serialLabel = QtWidgets.QLabel(self.frame)
        self.serialLabel.setGeometry(QtCore.QRect(60, 510, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.serialLabel.setFont(font)
        self.serialLabel.setObjectName("serialLabel")
        self.lineEditBarcode = QtWidgets.QLineEdit(self.frame)
        self.lineEditBarcode.setGeometry(QtCore.QRect(210, 510, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.lineEditBarcode.setFont(font)
        self.lineEditBarcode.setStyleSheet("QLineEdit{\n"
                                           "background-color:rgba(0,0,0,0);\n"
                                           "border:none;\n"
                                           "border-bottom: 3px solid rgba(42,226,230,255);\n"
                                           "color:rgba(0,0,0,255);\n"
                                           "padding-bottom:7px;\n"
                                           "border-bottom-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                                           "}\n"
                                           "")
        self.lineEditBarcode.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEditBarcode.setObjectName("lineEditBarcode")
        self.lineEditName = QtWidgets.QLineEdit(self.frame)
        self.lineEditName.setGeometry(QtCore.QRect(209, 550, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.lineEditName.setFont(font)
        self.lineEditName.setToolTipDuration(0)
        self.lineEditName.setStyleSheet("QLineEdit{\n"
                                        "background-color:rgba(0,0,0,0);\n"
                                        "border:none;\n"
                                        "border-bottom:3px solid rgba(42,226,230,255);\n"
                                        "color:rgba(0,0,0,255);\n"
                                        "padding-bottom:7px;\n"
                                        "border-bottom-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                                        "}\n"
                                        "")
        self.lineEditName.setInputMask("")
        self.lineEditName.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEditName.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEditName.setClearButtonEnabled(False)
        self.lineEditName.setObjectName("lineEditName")
        self.nameLabel = QtWidgets.QLabel(self.frame)
        self.nameLabel.setGeometry(QtCore.QRect(60, 560, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.nameLabel.setFont(font)
        self.nameLabel.setObjectName("nameLabel")
        self.start = QtWidgets.QPushButton(self.frame)
        self.start.setGeometry(QtCore.QRect(60, 610, 201, 61))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.start.setFont(font)
        self.start.setStyleSheet("QPushButton{\n"
                                 "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                                 "font: 75 20pt \'MS Shell Dlg 2\';\n"
                                 "border-top-left-radius:30px;\n"
                                 "border-bottom-right-radius:30px;\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "\n"
                                 "QPushButton::hover{\n"
                                 "font: 75 25pt \'MS Shell Dlg 2\';\n"
                                 "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                                 "\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "\n"
                                 "QPushButton::pressed{\n"
                                 "font: 75 25pt \'MS Shell Dlg 2\';\n"
                                 "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                                 "padding-top:10px;\n"
                                 "}\n"
                                 "")
        self.start.setObjectName("start")
        self.log = QtWidgets.QPushButton(self.frame)
        self.log.setGeometry(QtCore.QRect(290, 610, 191, 61))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.log.setFont(font)
        self.log.setStyleSheet("QPushButton{\n"
                               "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                               "font: 75 20pt \'MS Shell Dlg 2\';\n"
                               "border-top-right-radius:30px;\n"
                               "border-bottom-left-radius:30px;\n"
                               "}\n"
                               "\n"
                               "\n"
                               "\n"
                               "QPushButton::hover{\n"
                               "font: 75 25pt \'MS Shell Dlg 2\';\n"
                               "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                               "\n"
                               "}\n"
                               "\n"
                               "\n"
                               "\n"
                               "QPushButton::pressed{\n"
                               "font: 75 25pt \'MS Shell Dlg 2\';\n"
                               "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                               "padding-top:10px;\n"
                               "}\n"
                               "")
        self.log.setObjectName("log")
        self.light = QtWidgets.QLabel(self.frame)
        self.light.setGeometry(QtCore.QRect(50, 40, 440, 60))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.light.setFont(font)
        self.light.setStyleSheet("QLabel{\n"
                                 "border:4px solid black;\n"
                                 "border-radius:30px;\n"
                                 "color:black;\n"
                                 "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 0, 0, 255), stop:0.323864 rgba(222, 45, 175, 255), stop:0.5 rgba(211, 61, 235, 255), stop:0.642045 rgba(157, 45, 241, 255), stop:1 rgba(0, 0, 255, 255));\n"
                                 "}")
        self.light.setText("")
        self.light.setScaledContents(True)
        self.light.setAlignment(QtCore.Qt.AlignCenter)
        self.light.setObjectName("light")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 481, 100))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("QLabel{\n"
                                   "border:4px solid black;\n"
                                   "border-radius:40px;\n"
                                   "    \n"
                                   "    background-color: rgb(250, 249, 246);\n"
                                   "}")
        self.label_2.setText("")
        self.label_2.setScaledContents(True)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.exitButton = QtWidgets.QPushButton(self.frame)
        self.exitButton.setGeometry(QtCore.QRect(499, 0, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.exitButton.setFont(font)
        self.exitButton.setStyleSheet(
            "QPushButton{background-color: qlineargradient(spread:pad, x1:0.142045, y1:0.148, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.704545 rgba(144, 0, 0, 255));border-radius:10px;}\n"
            "\n"
            "\n"
            "QPushButton::hover{background-color: qlineargradient(spread:pad, x1:0.142045, y1:0.148, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.704545 rgba(144, 0, 0, 255));border:rgba(170,0,250,255);border-radius:5px;}\n"
            "\n"
            "\n"
            "QPushButton::pressed{padding-top:10px;padding-up:5px;background-color: qlineargradient(spread:pad, x1:0.142045, y1:0.148, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.704545 rgba(144, 0, 0, 255));}")
        self.exitButton.setObjectName("exitButton")
        self.portLabel = QtWidgets.QLabel(self.frame)
        self.portLabel.setGeometry(QtCore.QRect(280,190,90,30))
        self.portLabel.setObjectName("portLabel")
        font = QtGui.QFont()
        font.setPointSize(15)
        self.portLabel.setFont(font)


        self.label_2.raise_()
        self.label_5.raise_()
        self.ateHeading.raise_()
        self.textBrowser.raise_()
        self.serialLabel.raise_()
        self.lineEditBarcode.raise_()
        self.lineEditName.raise_()
        self.nameLabel.raise_()
        self.start.raise_()
        self.log.raise_()
        self.light.raise_()
        self.exitButton.raise_()
        self.comboBox.raise_()
        self.portLabel.raise_()

        self.exitButton.clicked.connect(self.closeFunction)
        self.log.clicked.connect(self.logFolder)
        self.start.clicked.connect(self.CheckforDatabase)
        # self.lineEditBarcode.setText("HE518860#123456789012345")
        # self.lineEditName.setText("Paras")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.timer = QTimer()
        self.timer.timeout.connect(self.updatePorts)
        self.timer.start(1000)

        self.state = True

        self.animation = QTimer()
        self.animation.timeout.connect(self.label_animation)
        self.animation.start(100)
        # self.CheckforDatabase()


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.ateHeading.setText(_translate("Form", "Retractor LED Testing"))
        self.serialLabel.setText(_translate("Form", "Serial Number"))
        self.lineEditBarcode.setPlaceholderText(_translate("Form", "Enter Barcode here"))
        self.lineEditName.setPlaceholderText(_translate("Form", "Enter your name"))
        self.nameLabel.setText(_translate("Form", "Associate Name"))
        self.start.setText(_translate("Form", "Start Test"))
        self.log.setText(_translate("Form", "Logs"))
        self.exitButton.setToolTip(_translate("Form", "CLOSE"))
        self.exitButton.setText(_translate("Form", "X"))
        self.comboBox.setCurrentText(_translate("Form", "New Item"))
        self.portLabel.setText(_translate("Form", "COM Port:"))



    def CheckforDatabase(self):
        account_user = getpass.getuser()
        try:
            if not os.path.exists(f"C:/Users/{account_user}/AppData/Local/retractorDBLocation"):
                # os.chdir(f"C:/Users/{account_user}/AppData/Local")
                os.mkdir(os.path.join(f"C:/Users/{account_user}/AppData/Local", 'retractorDBLocation'))
            if os.path.exists(f"C:/Users/{account_user}/AppData/Local/retractorDBLocation"):
                if os.path.exists(f"C:/Users/{account_user}/AppData/Local/retractorDBLocation/source.txt"):
                    self.dblocation = open(f"C:/Users/{account_user}/AppData/Local/retractorDBLocation/source.txt", "r").readline()
                    if str(self.dblocation) == "None":
                        resource_file.FileDialogExample().showDialog()
                        self.startTest()
                    else:
                        if "retractor_database.db" in self.dblocation:
                            self.startTest()
                        else:
                            self.Message("Error", "Incorrect Database!")
                else:
                    with open(f"C:/Users/{account_user}/AppData/Local/retractorDBLocation/source.txt", 'w') as file:
                        file.write("None")
                    file.close()
                    self.dblocation = open(f"C:/Users/{account_user}/AppData/Local/retractorDBLocation/source.txt", "r").readline()
                    if str(self.dblocation) == "None":
                        resource_file.FileDialogExample().showDialog()
                        self.startTest()
                    else:
                        if "retractor_database.db" in self.dblocation:
                            self.startTest()
                        else:
                            self.Message("Error", "Incorrect Database!")

        except Exception as err:
            print(err)


    def updatePorts(self):
        currentText = self.comboBox.currentText()
        self.comboBox.clear()
        available = QSerialPortInfo.availablePorts()
        if currentText in available:
            pass
        else:
            for port in available:
                self.comboBox.addItem(port.portName())

        if currentText in available:
            self.comboBox.setCurrentText(currentText)


    def Message(self, title: str = "MESSAGE", prompt: str = ""):
        self.message = QMessageBox()
        self.message.setWindowTitle(title)
        # self.message.setWindowIcon(QIcon(f"{gui}logo_1.png"))
        self.message.setText(prompt)
        self.message.setStandardButtons(QMessageBox.StandardButton.Ok)
        self.message.exec_()

    def get_current_datetime(self):
        # Get the current date and time
        current_datetime = datetime.datetime.now()

        # Format the datetime as a string in the required format for SQL
        formatted_datetime = current_datetime.strftime('%Y-%m-%d %H:%M:%S')

        return formatted_datetime

    def startTest(self):
        if self.start.text() == "Stop Test":
            self.state = False
            return 0

        self.database = Database()
        self.database.connect_DB()

        if self.comboBox.currentText() == "":
            self.Message("WARNING", "NO Port Found")
            return None

        self.textBrowser.clear()
        self.comboBox.setEnabled(False)
        self.database.DBisConnect()
        if (len(self.lineEditBarcode.text()) == 24) and ("HE518" in self.lineEditBarcode.text().upper()):
            if self.lineEditName.text() != "":
                pass
            else:
                self.Message("ERROR", "Kindly Enter your name to proceed!")
                return None
        else:
            if len(self.lineEditBarcode.text()) == 0:
                self.Message("ERROR", "Can't begin without Barcode")
                return None
            self.Message("ERROR", "Kindly Enter the correct Serial Number")
            return None

        global colors, data_dict, reply_dict
        self.start.setText("Stop Test")
        self.state = True
        qApp.processEvents()

        self.testID = self.database.writeDetails(self.lineEditBarcode.text(), self.lineEditName.text(),
                                                 self.get_current_datetime(), self.get_current_datetime(), "Halted")
        if self.testID is None:
            self.start.setEnabled(True)
            self.comboBox.setEnabled(True)
            return None
        self.database.writeDefaultLedStates(int(self.testID))

        def send_hex_packet(serial_port, hex_data, key_name):
            try:
                ser = serial.Serial(serial_port, baudrate=9600, timeout=1)

                hex_bytes = bytes.fromhex(hex_data)
                print(hex_bytes)
                ser.write(hex_bytes)

                data = ser.read(25)

                ser.close()
                if str(reply_dict[key_name]) == str(data):
                    self.database.updateLedState(int(self.testID), key_name, "True")
                    return True

            except serial.SerialException as e:
                if f"could not open port '{serial_port}'" in str(e):
                    self.Message("WARNING", "Serial Communication Failed!")
                    self.finalStatus(
                        self.database.searchQuery(f"SELECT * from LedState where testId = {int(self.testID)}"))
                    self.database.disconnectDB()
                    return None
                # pass
            self.database.updateLedState(int(self.testID), key_name, "False")
            return False

        color_dict = {'Idle Idle': ["background-color: rgba(0,0,255,255);"]
            , 'Idle Preparing': [
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255), stop:0.5 rgba(60, 198, 225, 255), stop:0.6 rgba(60, 198, 225, 0), stop:0.7 rgba(60, 198, 225, 0), stop:0.8 rgba(60, 198, 225, 0), stop:0.9 rgba(0, 255, 243, 0), stop:1 rgba(0, 255, 243, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255), stop:0.5 rgba(60, 198, 225, 255), stop:0.6 rgba(60, 198, 225, 255), stop:0.7 rgba(60, 198, 225, 0), stop:0.8 rgba(60, 198, 225, 0), stop:0.9 rgba(0, 255, 243, 0), stop:1 rgba(0, 255, 243, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255), stop:0.5 rgba(60, 198, 225, 255), stop:0.6 rgba(60, 198, 225, 255), stop:0.7 rgba(60, 198, 225, 255), stop:0.8 rgba(60, 198, 225, 0), stop:0.9 rgba(0, 255, 243, 0), stop:1 rgba(0, 255, 243, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255), stop:0.5 rgba(60, 198, 225, 255), stop:0.6 rgba(60, 198, 225, 255), stop:0.7 rgba(60, 198, 225, 255), stop:0.8 rgba(60, 198, 225, 255), stop:0.9 rgba(0, 255, 243, 0), stop:1 rgba(0, 255, 243, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255), stop:0.5 rgba(60, 198, 225, 255), stop:0.6 rgba(60, 198, 225, 255), stop:0.7 rgba(60, 198, 225, 255), stop:0.8 rgba(60, 198, 225, 255), stop:0.9 rgba(60, 198, 225, 255), stop:1 rgba(0, 255, 243, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255), stop:0.5 rgba(60, 198, 225, 255), stop:0.6 rgba(60, 198, 225, 255), stop:0.7 rgba(60, 198, 225, 255), stop:0.8 rgba(60, 198, 225, 255), stop:0.9 rgba(60, 198, 225, 255), stop:1 rgba(60, 198, 225, 255));"
            ]
            , 'Idle Charging': [
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 0));",
                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));"
            ],
                      'Idle Finishing': [
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 0), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 0), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 0), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));"
                      ]
            ,
                      'Idle Faulted': [
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop: 0.47 rgba(0, 0, 255, 255), stop:0.49 rgba(187, 69, 237, 255) , stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));"],
                      'Idle Reserved': [
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 255, 255), stop:0.49 rgba(45, 149, 232, 255) , stop:0.5 rgba(26, 214, 214, 255), stop:0.6 rgba(26, 214, 214, 255), stop:0.7 rgba(26, 214, 214, 255), stop:0.8 rgba(26, 214, 214, 255), stop:0.9 rgba(26, 214, 214, 255), stop:1 rgba(26, 214, 214, 255));"],
                      'Preparing Idle': [
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 0), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(0, 0, 255, 255), stop:1 rgba(0, 0, 255, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(0, 0, 255, 255), stop:1 rgba(0, 0, 255, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(0, 0, 255, 255), stop:1 rgba(0, 0, 255, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(0, 0, 255, 255), stop:1 rgba(0, 0, 255, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(0, 0, 255, 255), stop:1 rgba(0, 0, 255, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(0, 0, 255, 255), stop:1 rgba(0, 0, 255, 255));",
                          "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(26, 214, 214, 255), stop:0.5 rgba(0, 0, 255, 255), stop:1 rgba(0, 0, 255, 255));"
                      ],
                      "Preparing Preparing":
                          [
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 0), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(26, 214, 214, 0), stop:0.6 rgba(26, 214, 214, 0), stop:0.7 rgba(26, 214, 214, 0), stop:0.8 rgba(26, 214, 214, 0), stop:0.9 rgba(26, 214, 214, 0), stop:1 rgba(0, 255, 243, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(26, 214, 214, 255), stop:0.6 rgba(26, 214, 214, 0), stop:0.7 rgba(26, 214, 214, 0), stop:0.8 rgba(26, 214, 214, 0), stop:0.9 rgba(26, 214, 214, 0), stop:1 rgba(0, 255, 243, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(26, 214, 214, 255), stop:0.6 rgba(26, 214, 214, 255), stop:0.7 rgba(26, 214, 214, 0), stop:0.8 rgba(26, 214, 214, 0), stop:0.9 rgba(26, 214, 214, 0), stop:1 rgba(0, 255, 243, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(26, 214, 214, 255), stop:0.6 rgba(26, 214, 214, 255), stop:0.7 rgba(26, 214, 214, 255), stop:0.8 rgba(26, 214, 214, 0), stop:0.9 rgba(26, 214, 214, 0), stop:1 rgba(0, 255, 243, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(26, 214, 214, 255), stop:0.6 rgba(26, 214, 214, 255), stop:0.7 rgba(26, 214, 214, 255), stop:0.8 rgba(26, 214, 214, 255), stop:0.9 rgba(26, 214, 214, 0), stop:1 rgba(0, 255, 243, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(26, 214, 214, 255), stop:0.6 rgba(26, 214, 214, 255), stop:0.7 rgba(26, 214, 214, 255), stop:0.8 rgba(26, 214, 214, 255), stop:0.9 rgba(26, 214, 214, 255), stop:1 rgba(0, 255, 243, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(26, 214, 214, 255), stop:0.5 rgba(26, 214, 214, 255), stop:0.6 rgba(26, 214, 214, 255), stop:0.7 rgba(26, 214, 214, 255), stop:0.8 rgba(26, 214, 214, 255), stop:0.9 rgba(26, 214, 214, 255), stop:1 rgba(26, 214, 214, 255));"
                          ],
                      "Preparing Charging":
                          [
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 0), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 0), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(26, 214, 214, 255), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));"
                          ],
                      "Preparing Finishing":
                          [
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 0), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 0), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 0), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(34,200,20, 0), stop:0.6 rgba(34,200,20, 0), stop:0.7 rgba(34,200,20, 0), stop:0.8 rgba(34,200,20, 0), stop:0.9 rgba(34,200,20, 0), stop:1 rgba(34,200,20, 0));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(26, 214, 214, 255), stop:0.5 rgba(34,200,20, 255), stop:0.6 rgba(34,200,20, 255), stop:0.7 rgba(34,200,20, 255), stop:0.8 rgba(34,200,20, 255), stop:0.9 rgba(34,200,20, 255), stop:1 rgba(34,200,20, 255));"
                          ]
            ,
                      "Preparing Faulted":
                          [
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 0), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 0), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 0), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 0), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 0), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(0, 255, 243, 0), stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));",
                              "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(26, 214, 214, 255), stop:0.1 rgba(26, 214, 214, 255), stop:0.2 rgba(26, 214, 214, 255), stop:0.3 rgba(26, 214, 214, 255), stop:0.4 rgba(26, 214, 214, 255), stop:0.49 rgba(26, 214, 214, 255), stop:0.5 rgba(255,30,30, 255), stop:1 rgba(255,30,30, 255));"
                          ],
                      "Preparing Reserved":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Preparing", 255, 0, 0, 0, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Preparing", 255, 255, 0, 0, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Preparing", 255, 255, 255, 0, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Preparing", 255, 255, 255, 255, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Preparing", 255, 255, 255, 255, 255, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Preparing", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',

                          ],
                      "Charging Idle":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 0, 0, 0, 0, 0)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 0, 0, 0, 0)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 0, 0, 0)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 0, 0)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 0)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',

                          ],
                      "Charging Preparing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 0, 0, 0, 0, 0)}{self.gun2("Preparing", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 0, 0, 0, 0)}{self.gun2("Preparing", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 0, 0, 0)}{self.gun2("Preparing", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 0, 0)}{self.gun2("Preparing", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 0)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 255)});',

                          ],
                      "Charging Charging":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 0, 0, 0, 0, 0)}{self.gun2("Charging", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 0, 0, 0, 0)}{self.gun2("Charging", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 0, 0, 0)}{self.gun2("Charging", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 0, 0)}{self.gun2("Charging", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 0)}{self.gun2("Charging", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 255, 255)});',

                          ],
                      "Charging Finishing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 0, 0, 0, 0, 0)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 0, 0, 0, 0)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 0, 0, 0)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 0, 0)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 0)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Charging Faulted":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 0, 0, 0, 0, 0)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 0, 0, 0, 0)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 0, 0, 0)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 0, 0)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 0)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Charging Reserved":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 0, 0, 0, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 0, 0, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 0, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 0, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 0)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Charging", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Finishing Idle":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Finishing Preparing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Preparing", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Preparing", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Finishing Charging":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Charging", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Charging", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Charging", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Finishing Finishing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Finishing Faulted":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Finishing Reserved":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255, False)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Finishing", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Faulted Idle":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Faulted Preparing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Faulted Charging":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Faulted Finishing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Faulted Faulted":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Faulted Reserved":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Faulted", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Reserved Idle":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Idle", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Reserved Preparing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Preparing", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Reserved Charging":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 0, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 0, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 0, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 0, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 255, 0)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Charging", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Reserved Finishing":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255, False)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Finishing", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Reserved Faulted":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Faulted", 255, 255, 255, 255, 255, 255)});'

                          ],
                      "Reserved Reserved":
                          [
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});',
                              f'background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, {self.gun1("Reserved", 255, 255, 255, 255, 255, 255)}{self.gun2("Reserved", 255, 255, 255, 255, 255, 255)});'

                          ]
                      }

        for i in color_dict.keys():
            font = QtGui.QFont()
            font.setFamily("MS Sans Serif")
            font.setPointSize(13)
            font.setBold(True)
            self.textBrowser.setFont(font)
            self.textBrowser.setTextColor(PyQt5.QtCore.Qt.blue)
            self.textBrowser.append(f'Checking color state for "{i}".')
            PyQt5.QtWidgets.qApp.processEvents()
            if self.state == False:
                break

            if len(color_dict[i]) == 1:
                self.received = None
                self.received = send_hex_packet(self.comboBox.currentText(), data_dict[i], i)
                if self.received is None:
                    self.textBrowser.append("Serial Port issue")
                    self.textBrowser.append("Test Stopped!")
                    PyQt5.QtWidgets.qApp.processEvents()
                    self.log1()
                    self.state = False
                    self.start.setEnabled(True)
                    return None
                for p in range(1, 4):
                    if self.state == False:
                        break
                    self.light.setStyleSheet(
                        "QLabel{\nborder:4px solid black;\nborder-radius:30px;\ncolor:white;\n	" + str(
                            color_dict[i][0]) + "}")
                    self.start.setStyleSheet(
                        "QPushButton{font: 75 20pt 'MS Shell Dlg 2';border-top-left-radius:30px;border-bottom-right-radius:30px;color:white;" + f"{color_dict[i][0]}" + "}\n"
                    )
                    self.log.setStyleSheet(
                        "QPushButton{font: 75 20pt 'MS Shell Dlg 2';border-top-right-radius:30px;border-bottom-left-radius:30px;color:white;" + f"{color_dict[i][0]}" + "}\n"
                    )
                    PyQt5.QtWidgets.qApp.processEvents()
                    time.sleep(1.4)
            else:
                self.received = None
                self.received = send_hex_packet(self.comboBox.currentText(), data_dict[i], i)
                if self.received is None:
                    self.textBrowser.append("Serial Port issue")
                    self.textBrowser.append("Test Stopped!")
                    PyQt5.QtWidgets.qApp.processEvents()
                    self.log1()
                    self.state = False
                    self.start.setEnabled(True)
                    return None
                for j in color_dict[i]:
                    if self.state == False:
                        break
                    self.light.setStyleSheet(
                        "QLabel{\nborder:4px solid black;\nborder-radius:30px;\ncolor:black;\n	" + str(j) + "}")
                    self.start.setStyleSheet(
                        "QPushButton{font: 75 20pt 'MS Shell Dlg 2';border-top-left-radius:30px;border-bottom-right-radius:30px;color:black;" + f"{j}" + "}\n"
                    )
                    self.log.setStyleSheet(
                        "QPushButton{font: 75 20pt 'MS Shell Dlg 2';border-top-right-radius:30px;border-bottom-left-radius:30px;color:black;" + f"{j}" + "}\n"
                    )
                    PyQt5.QtWidgets.qApp.processEvents()
                    time.sleep(0.4)

            if self.received:
                self.textBrowser.setTextColor(QtCore.Qt.darkGreen)
                self.textBrowser.append(f'Color state for "{i}" is correct...')
            else:
                self.textBrowser.setTextColor(QtCore.Qt.red)
                self.textBrowser.append(f'Color state for "{i}" is wrong...')
            PyQt5.QtWidgets.qApp.processEvents()
        if self.start.text() == "Stop Test":
            self.database.writeEndtime(int(self.testID), self.get_current_datetime())
            self.textBrowser.append("Test Stopped/Ended")
            self.log1()
            self.finalStatus(self.database.searchQuery(f"SELECT * from LedState where testId = {int(self.testID)}"))
            self.comboBox.setEnabled(True)
            self.database.disconnectDB()
            self.lineEditBarcode.clear()
            self.start.setText("Start Test")

    def closeFunction(self):
        self.database.disconnectDB()
        self.state = False
        self.log1()
        QtWidgets.QApplication.quit()

    def label_animation(self):
        if not self.start.isEnabled():
            current_text = self.ateHeading.text()
            if current_text.endswith('...'):
                current_text = 'Retractor LED Testing'
            else:
                current_text += '.'
            self.ateHeading.setText(current_text)

    def finalStatus(self, ledStates: list):
        # print("led states")
        # print(ledStates)
        for i in ledStates:
            # print("led states i[1:]")
            # print(i[1:])
            # print("led states [2]")
            # print(i[2])
            if "'Not Tested'" in i[1:]:
                self.Message("RESULT", "Test Stopped!")
                value = "Partial Tested"
            elif "0" in i[1:]:
                self.Message("RESULT", "Unit is Fail")
                value = "FAIL"
            else:
                self.Message("RESULT", "Test Passed")
                value = "PASS"
            self.database.finalStatusDB(value, self.testID)

    def gun1(self, state: str, step1: int = 0, step2: int = 0, step3: int = 0, step4: int = 0, step5: int = 0,
             step6: int = 0, toggle: bool = True):
        global colors
        """

        :type toggle: object
        """
        if state == "Idle":
            return f"stop:0 rgba({colors['Blue']}{step1}), stop:0.1 rgba({colors['Blue']}{step2}), stop:0.2 rgba({colors['Blue']}{step3}), stop:0.3 rgba({colors['Blue']}{step4}), stop:0.4 rgba({colors['Blue']}{step5}), stop:0.49 rgba({colors['Blue']}{step6}),"
        elif state == "Preparing":
            return f"stop:0 rgba({colors['Cyan']}{step1}), stop:0.1 rgba({colors['Cyan']}{step2}), stop:0.2 rgba({colors['Cyan']}{step3}), stop:0.3 rgba({colors['Cyan']}{step4}), stop:0.4 rgba({colors['Cyan']}{step5}), stop:0.49 rgba({colors['Cyan']}{step6}),"
        elif state == "Charging":
            return f"stop:0 rgba({colors['Green']}{step1}), stop:0.1 rgba({colors['Green']}{step2}), stop:0.2 rgba({colors['Green']}{step3}), stop:0.3 rgba({colors['Green']}{step4}), stop:0.4 rgba({colors['Green']}{step5}), stop:0.49 rgba({colors['Green']}{step6}),"
        elif state == "Finishing" and toggle:
            return f"stop:0 rgba({colors['Green']}{step1}), stop:0.1 rgba({colors['Green']}{step2}), stop:0.2 rgba({colors['Green']}{step3}), stop:0.3 rgba({colors['Green']}{step4}), stop:0.4 rgba({colors['Green']}{step5}), stop:0.49 rgba({colors['Green']}{step6}),"
        elif state == "Finishing" and not toggle:
            return f"stop:0 rgba({colors['Green']}{0}), stop:0.1 rgba({colors['Green']}{0}), stop:0.2 rgba({colors['Green']}{0}), stop:0.3 rgba({colors['Green']}{0}), stop:0.4 rgba({colors['Green']}{0}), stop:0.49 rgba({colors['Green']}{0}),"
        elif state == "Faulted":
            return f"stop:0 rgba({colors['Red']}{step1}), stop:0.1 rgba({colors['Red']}{step2}), stop:0.2 rgba({colors['Red']}{step3}), stop:0.3 rgba({colors['Red']}{step4}), stop:0.4 rgba({colors['Red']}{step5}), stop:0.49 rgba({colors['Red']}{step6}),"
        elif state == "Reserved":
            return f"stop:0 rgba({colors['Cyan']}{step1}), stop:0.1 rgba({colors['Cyan']}{step2}), stop:0.2 rgba({colors['Cyan']}{step3}), stop:0.3 rgba({colors['Cyan']}{step4}), stop:0.4 rgba({colors['Cyan']}{step5}), stop:0.49 rgba({colors['Cyan']}{step6}),"

    def gun2(self, state: str, step1: int = 0, step2: int = 0, step3: int = 0, step4: int = 0, step5: int = 0,
             step6: int = 0, toggle: bool = True):
        global colors
        """

        :type toggle: object
        """
        if state == "Idle":
            return f"stop:0.5 rgba({colors['Blue']}{step1}), stop:0.6 rgba({colors['Blue']}{step2}), stop:0.7 rgba({colors['Blue']}{step3}), stop:0.8 rgba({colors['Blue']}{step4}), stop:0.9 rgba({colors['Blue']}{step5}), stop:1 rgba({colors['Blue']}{step6})"
        elif state == "Preparing":
            return f"stop:0.5 rgba({colors['Cyan']}{step1}), stop:0.6 rgba({colors['Cyan']}{step2}), stop:0.7 rgba({colors['Cyan']}{step3}), stop:0.8 rgba({colors['Cyan']}{step4}), stop:0.9 rgba({colors['Cyan']}{step5}), stop:1 rgba({colors['Cyan']}{step6})"
        elif state == "Charging":
            return f"stop:0.5 rgba({colors['Green']}{step1}), stop:0.6 rgba({colors['Green']}{step2}), stop:0.7 rgba({colors['Green']}{step3}), stop:0.8 rgba({colors['Green']}{step4}), stop:0.9 rgba({colors['Green']}{step5}), stop:1 rgba({colors['Green']}{step6})"
        elif state == "Finishing" and toggle:
            return f"stop:0.5 rgba({colors['Green']}{step1}), stop:0.6 rgba({colors['Green']}{step2}), stop:0.7 rgba({colors['Green']}{step3}), stop:0.8 rgba({colors['Green']}{step4}), stop:0.9 rgba({colors['Green']}{step5}), stop:1 rgba({colors['Green']}{step6})"
        elif state == "Finishing" and not toggle:
            return f"stop:0.5 rgba({colors['Green']}{0}), stop:0.6 rgba({colors['Green']}{0}), stop:0.7 rgba({colors['Green']}{0}), stop:0.8 rgba({colors['Green']}{0}), stop:0.9 rgba({colors['Green']}{0}), stop:1 rgba({colors['Green']}{0})"
        elif state == "Faulted":
            return f"stop:0.5 rgba({colors['Red']}{step1}), stop:0.6 rgba({colors['Red']}{step2}), stop:0.7 rgba({colors['Red']}{step3}), stop:0.8 rgba({colors['Red']}{step4}), stop:0.9 rgba({colors['Red']}{step5}), stop:1 rgba({colors['Red']}{step6})"
        elif state == "Reserved":
            return f"stop:0.5 rgba({colors['Cyan']}{step1}), stop:0.6 rgba({colors['Cyan']}{step2}), stop:0.7 rgba({colors['Cyan']}{step3}), stop:0.8 rgba({colors['Cyan']}{step4}), stop:0.9 rgba({colors['Cyan']}{step5}), stop:1 rgba({colors['Cyan']}{step6})"

    def log1(self):
        global name_of_setup

        """Log Creation"""
        if os.path.exists(f'{os.getcwd()}\\logs'):
            pass
        else:
            os.system("mkdir logs")
        filename = f"{os.getcwd()}\\logs\\log_" + str(
            self.lineEditBarcode.text()).upper() + "_" + str(
            self.lineEditName.text()).upper() + "_" + str(self.GETTIME()) + '.txt'
        myfile = open(filename, 'w')
        myfile.write("DUT PART NUMBER: " + self.lineEditBarcode.text())
        myfile.write('\n\n')
        myfile.write("Testing Engg. Name: " + self.lineEditName.text().upper())
        myfile.write('\n\n')
        myfile.write(self.textBrowser.toPlainText())
        myfile.close()

    def logFolder(self):
        webbrowser.open(f'{os.getcwd()}\\logs')

    def GETTIME(self):
        time_var = datetime.datetime.now()
        time_var = str(time_var.date()) + "_" + str(time_var.time().hour) + "_" + str(
            time_var.time().minute) + "_" + str(time_var.time().second)
        return time_var


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.setWindowFlag(QtCore.Qt.FramelessWindowHint)
    Form.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
    Form.setAttribute(QtCore.Qt.WA_NoSystemBackground, True)
    Form.show()
    sys.exit(app.exec_())
